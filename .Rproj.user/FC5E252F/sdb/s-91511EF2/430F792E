{
    "contents" : "##########################################################################################\n#                                                                                        #\n#  Process for converting raw APM .zip files (form AURIN) into .csvs and a .db database  #\n#                                                                                        #\n##########################################################################################\n\n##########################################################################################\n###  Example Code Use                                                                    #\n##########################################################################################\n\nif(F){\n  \n  # Set base path\n  basePath <- 'c:/temp/apm'\n  \n  # Run full conversion\n  buildAPMData(basePath,\n               newFileName = 'test.db',\n               transList = list('rentals'='rent','sales'=c('sold', 'auct')),\n               verbose = TRUE)\n  \n  # Instruction for simply converting .zips to .csvs \n  #(warning this doesn't correct bad file names)\n  convertAPMData(basePath, transType='sold', verbose=TRUE)\n\n}\n\n##########################################################################################\n###  Functions                                                                           #   \n##########################################################################################\n\n### Master function that converts all zips into a single .db -------------------------\n\nbuildAPMData <- function(basePath,                                    # Path to data\n                         newFileName='test.db',                       # Name of exp. file\n                         transList=list('rentals'='rent',\n                                          'sales'=c('sold', 'auct')), # List of file types\n                         verbose=TRUE                                 # Show progress?\n){\n  \n  # Set up libraries\n  require(RSQLite)\n  require(plyr)\n  require(RODBC)\n  require(RCurl)\n  \n  # Source necessary files\n  source(paste0(\"https://raw.githubusercontent.com/andykrause/dataMgmtTools/\",\n                \"master/basicConversionTools.R\"))\n  \n  # Fix any bad file names\n  fixFileNames(basePath, badStr='.csv.zip', newStr='.zip', verbose=verbose)\n  \n  # Build a temporary folder\n  dir.create(paste0(basePath, '/temp'), showWarnings = FALSE)\n  \n  # Convert .zips to .csvs\n  if(verbose) cat('Converting .zips to .csvs', '\\n')\n  for(tL in 1:length(transList)){\n    convertAPMData(basePath, transType=transList[[tL]], \n                   folderName=names(transList[tL]), verbose=verbose)\n  }\n  \n  # Combine all .csvs into a SQLite database\n  if(verbose) cat('Converting .csvs to .db', '\\n')\n  convertCSVtoSQLite(dataPathCurrent=basePath,\n                     newFileName=newFileName,\n                     verbose=verbose,\n                     overWrite=TRUE,\n                     tableNames=c('rentals','sales'))\n  \n  # Successful output message\n  if(verbose) cat('\\n***CONVERSION SUCCESSFUL.  Data saved in:', \n                  paste0(basePath, '/', newFileName), '***\\n')\n  \n  # Remove temporary directory\n  unlink(paste0(basePath, '/temp'), recursive=TRUE, force=TRUE)\n  \n}\n\n### Helper function that unzips, combines and turns .zips in to a .csv -------------------\n\nconvertAPMData <- function(basePath,            # The main directory where the datalives\n                           transType='sold',    # Type of data (subdirectory) to work on\n                           folderName=NULL,     # Name export folder if not transTYpe\n                           verbose=TRUE         # Do you want to see the progress?\n){\n  \n  # Require libraries\n  require(plyr)\n  \n  # Fix to lower case\n  transType <- tolower(transType)\n  \n  # Get a list of zip files to extract & remove non zip\n  if(verbose) cat(\"Reading in .ZIP files to be extracted\\n\")\n  zipFiles <- tolower(list.files(basePath))\n  zipFiles <- as.list(zipFiles[grep('.zip', zipFiles)])\n  zipFiles <- selectFiles(zipFiles, transType)\n  \n  # Convert to .csv\n  if(verbose) cat(\"Converting to .csv\\n\")\n  lapply(zipFiles, extractAPMData, dataPath=basePath, verbose=TRUE)\n  \n  # Conversion Message\n  if(verbose) cat(length(zipFiles), 'Files extracted\\n')\n  \n  # Read in all data\n  if(verbose) cat('Reading in all .csv files \\n')\n  csvFiles <- list.files(paste0(basePath, '/temp'))\n  csvFiles <- as.list(paste0(basePath, '/temp/', csvFiles[grep('.csv', csvFiles)]))\n  csvFiles <- selectFiles(csvFiles, transType)\n\n  # Read .csv into memory\n  csvData <- lapply(csvFiles, tryReadCSV, stringsAsFactors=FALSE)\n  \n  # Remove temp files\n  lapply(csvFiles, file.remove)\n  \n  # Merge into a single file\n  if(verbose) cat('Merging to a single file \\n')\n  csvData <- rbind.fill(csvData)\n  \n  # Write out the file\n  if(is.null(folderName)) folderName <- transType[1]\n  if(verbose) cat('Writing out merged ', folderName, 'file to ',\n                  paste0(basePath, '/', folderName, '.csv'),'\\n')\n  write.csv(csvData, paste0(basePath, '/', folderName, '.csv'))\n}\n\n### Helper functions that handles the unzipping and renaming process ---------------------\n\nextractAPMData <- function(fileName,             # File name to be extracted\n                           dataPath,             # Path to the data (.zip file)\n                           verbose=TRUE          # Do you want to see the progress?\n){\n  \n  # Create temporary directory  \n  tempPath = gsub('.zip', '', paste0(dataPath, '/temp/', fileName))\n  dir.create(tempPath, showWarnings = FALSE)\n  \n  # Extract data\n  if(verbose){\n    cat('  Extracting, renaming and moving', gsub('.zip', '.csv', fileName), '\\n')\n  }\n  unzip(paste0(dataPath, '/', fileName), exdir=tempPath)\n  \n  # Remove all non .csv files\n  fNames <- list.files(tempPath)\n  xCut <- c(grep('.csv', fNames))\n  if(length(xCut) != 0) xNames <- as.list(paste0(tempPath, '/', fNames[-xCut]))\n  lapply(xNames, file.remove)\n\n  # Rename File\n  newName <- paste0(gsub('.zip', '', fileName), '.csv')\n  file.rename(from=paste0(tempPath, '/', list.files(tempPath)[1]),\n              to=paste0(tempPath, '/', newName))\n  \n  # Move File\n  file.copy(from=paste0(tempPath, '/', newName),\n            to=paste0(dataPath, '/temp/', newName),\n            overwrite=TRUE)\n  \n  # Delete old file and directory\n  file.remove(paste0(tempPath, '/', list.files(tempPath)))\n  unlink(tempPath, recursive = TRUE, force=TRUE) \n  \n}\n\n### Helper function that allow for sources files directly from github --------------------\n\nsourceHttps <- function(u,                       # URL of file\n                        unlink.tmp.certs = FALSE # Security cert handling\n) {\n  # load package\n  require(RCurl)\n  \n  # read script lines from website using a security certificate\n  if(!file.exists(\"cacert.pem\")){\n    download.file(url=\"http://curl.haxx.se/ca/cacert.pem\",\n                  destfile = \"cacert.pem\")\n  }\n  script <- getURL(u, followlocation = TRUE, cainfo = \"cacert.pem\")\n  if(unlink.tmp.certs) unlink(\"cacert.pem\")\n  \n  # parase lines and evealuate in the global environement\n  eval(parse(text = script), envir= .GlobalEnv)\n}\n\n### Helper function that pulls out certain files from a list -----------------------------\n\nselectFiles <- function(fileList,         # list/vector of existing files\n                        selector          # vector of text string to look for in list\n                        ){\n  # Single selector\n  if(length(selector) == 1){\n    fileList <- as.list(fileList[grep(selector, fileList)])\n  } else {\n    \n  # Multiple selectors  \n    xFiles <- list(0)\n    for(xF in 1:length(selector)){\n      xFiles[[xF]] <- as.list(fileList[grep(selector[xF], fileList)])\n    }\n    fileList <- as.list(unlist(xFiles))\n  }\n    \n  # Return Value\n  return(fileList)\n}\n\n### Function that fixes bad file names ---------------------------------------------------\n\nfixFileNames <- function(dirPath,                 # File directory to work in\n                         badStr,                  # Bad string part of file name\n                         newStr=\"\",               # New string to replace it with\n                         verbose=FALSE            # Show progress?\n){\n  \n  #  Read in list of file names\n  allFiles <- tolower(list.files(dirPath))\n  \n  # Locate those containing bad names\n  toRename <- grep(badStr, allFiles)\n  \n  # Fix the names\n  if(length(toRename) > 0){\n    if(verbose) cat('Replacing', badStr, 'with', newStr, '\\n') \n    for(tR in 1:length(toRename)){\n      currName <- paste0(dirPath, '/', allFiles[toRename[tR]])\n      newName <- gsub(badStr, newStr, currName)\n      file.rename(from=currName, to=newName)\n    }\n   if(verbose) cat(length(toRename), 'file name(s) fixed.\\n\\n') \n  }\n}\n\n### Function that averts errors caused by reading in .csvs with no data ------------------\n\ntryReadCSV <- function(x,                        # File Name\n                       stringsAsFactors=FALSE    # Option\n                       )\n{\n  xx <- try(read.csv(x, stringsAsFactors=stringsAsFactors), silent=TRUE)\n  if(class(xx) == 'data.frame') return(xx)\n}\n\n\n",
    "created" : 1456289377060.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3146705922",
    "id" : "430F792E",
    "lastKnownWriteTime" : 1451947313,
    "path" : "~/Documents/R_Workspace/ausPropMrkt/buildAPMData.R",
    "project_path" : "buildAPMData.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}